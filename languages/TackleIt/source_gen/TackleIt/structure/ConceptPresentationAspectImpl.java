package TackleIt.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ProblemOfComparableMagnitude;
  private ConceptPresentation props_Tackle;
  private ConceptPresentation props_TackleIt;
  private ConceptPresentation props_TacklePass;
  private ConceptPresentation props_Trouble;
  private ConceptPresentation props_TroubleAndTackles;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ProblemOfComparableMagnitude:
        if (props_ProblemOfComparableMagnitude == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ProblemOfComparableMagnitude");
          props_ProblemOfComparableMagnitude = cpb.create();
        }
        return props_ProblemOfComparableMagnitude;
      case LanguageConceptSwitch.Tackle:
        if (props_Tackle == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Tackle");
          props_Tackle = cpb.create();
        }
        return props_Tackle;
      case LanguageConceptSwitch.TackleIt:
        if (props_TackleIt == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TackleIt = cpb.create();
        }
        return props_TackleIt;
      case LanguageConceptSwitch.TacklePass:
        if (props_TacklePass == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TacklePass");
          props_TacklePass = cpb.create();
        }
        return props_TacklePass;
      case LanguageConceptSwitch.Trouble:
        if (props_Trouble == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Trouble");
          props_Trouble = cpb.create();
        }
        return props_Trouble;
      case LanguageConceptSwitch.TroubleAndTackles:
        if (props_TroubleAndTackles == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TroubleAndTackles");
          props_TroubleAndTackles = cpb.create();
        }
        return props_TroubleAndTackles;
    }
    return null;
  }
}
